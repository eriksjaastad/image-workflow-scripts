[tool.ruff]
target-version = "py311"
src = ["scripts"]
extend-exclude = [
  "*.md", "*.txt", "*.json", "*.csv", "*.html", "*.css", "*.js",
  "scripts/archive/*",
]

[tool.ruff.lint]
# Comprehensive rule selection for production code quality
select = [
  "E",    # pycodestyle errors
  "F",    # pyflakes
  "I",    # isort (import sorting)
  "B",    # flake8-bugbear (common bugs)
  "BLE",  # flake8-blind-except (catch specific exceptions)
  "C4",   # flake8-comprehensions (better list/dict comprehensions)
  "DTZ",  # flake8-datetimez (timezone-aware datetimes)
  "T10",  # flake8-debugger (no leftover breakpoints)
  "EM",   # flake8-errmsg (good error messages)
  "ISC",  # flake8-implicit-str-concat
  "G",    # flake8-logging-format
  "PIE",  # flake8-pie (misc lints)
  "T20",  # flake8-print (discourage prints in libraries)
  "PT",   # flake8-pytest-style
  "RET",  # flake8-return (consistent return statements)
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "UP",   # pyupgrade (modern Python syntax)
  "PL",   # Pylint rules
  "RUF",  # Ruff-specific rules (stray noqa, etc)
  "S",    # flake8-bandit (security checks for data pipelines)
  "ARG",  # flake8-unused-arguments
  "PTH",  # flake8-use-pathlib (prefer pathlib over os.path)
  "D",    # pydocstyle (docstrings - enforced selectively via per-file-ignores)
]

ignore = [
  # Line length - let formatter handle it
  "E501",
  
  # Import position - sometimes needed for conditional imports
  "E402",
  
  # Complexity - we'll review these manually rather than auto-fail
  "PLR0911",  # Too many return statements
  "PLR0912",  # Too many branches
  "PLR0913",  # Too many arguments
  "PLR0915",  # Too many statements
  "PLR2004",  # Magic value comparison (sometimes clearer than constants)
  
  # Simplification - be pragmatic
  "SIM108",   # Use ternary (sometimes if/else is clearer)
  "SIM105",   # Use contextlib.suppress (explicit try/except is clearer)
  
  # Return - allow flexibility
  "RET504",   # Unnecessary variable assignment before return (sometimes adds clarity)
  
  # Pylint - too opinionated
  "PLW2901",  # Loop variable overwritten (sometimes intentional)
  
  # Security - pragmatic exceptions for scripting
  "S603",     # subprocess without shell=True (we validate inputs)
  "S607",     # subprocess with partial path (OK for known tools)
  "S608",     # SQL injection (we don't use raw SQL strings)
  
  # Docstrings - only enforce on library code (see per-file-ignores)
  "D100",     # Missing module docstring (enforced selectively)
  "D101",     # Missing class docstring (enforced selectively)
  "D102",     # Missing method docstring (enforced selectively)
  "D103",     # Missing function docstring (enforced selectively)
  "D104",     # Missing package docstring
  "D107",     # Missing __init__ docstring
  
  # Arguments - allow flexibility
  "ARG001",   # Unused function argument (sometimes needed for interface compatibility)
  "ARG002",   # Unused method argument (sometimes needed for overrides)
]

[tool.ruff.lint.per-file-ignores]
# CLI scripts and tools can use print statements
"scripts/**/run_*.py" = ["T201"]
"scripts/**/test_*.py" = ["T201", "PT009", "PT027"]  # Prints OK in tests, flexible asserts/fixtures
"scripts/[0-9][0-9]_*.py" = ["T201"]  # Numbered workflow scripts (user-facing CLIs)
"scripts/dashboard/**" = ["T201"]     # Dashboard scripts need prints for output
"scripts/tools/**" = ["T201"]         # Utility tools are CLI-oriented

# Test files have different requirements
"scripts/**/tests/**" = [
  "T201",    # Prints for debugging
  "PT009",   # Use unittest-style assertions (pytest auto-rewrites them)
  "PT027",   # Prefer pytest.raises with match (not always needed)
  "S101",    # Use assert (required for pytest)
  "PLR2004", # Magic values OK in tests
]

[tool.ruff.lint.flake8-bugbear]
# Extend default checks
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.ruff.lint.isort]
known-first-party = ["scripts"]
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable this
check_untyped_defs = true
